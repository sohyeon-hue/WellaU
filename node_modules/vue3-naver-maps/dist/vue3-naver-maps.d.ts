import { AllowedComponentProps } from 'vue';
import type { App } from 'vue';
import { ComponentCustomProps } from 'vue';
import { ComponentOptionsMixin } from 'vue';
import { DefineComponent } from 'vue';
import { ExtractPropTypes } from 'vue';
import { InitCallBacks } from './types';
import { Layers } from './types';
import { MapOptions } from './types';
import { Options } from './types';
import { RendererElement } from 'vue';
import { RendererNode } from 'vue';
import { SubModules } from './types';
import { VNode } from 'vue';
import { VNodeProps } from 'vue';

export declare function createNaverMap(app: App, options: Options_2): void;

export { InitCallBacks }

export { Layers }

export { MapOptions }

export declare const NaverCircle: DefineComponent<    {
latitude: {
type: NumberConstructor;
required: true;
};
longitude: {
type: NumberConstructor;
required: true;
};
radius: {
type: NumberConstructor;
required: false;
};
options: {
type: null;
required: false;
};
}, (_ctx: any, _cache: any) => VNode<RendererNode, RendererElement, {
[key: string]: any;
}>, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, ("center_changed" | "click" | "clickable_changed" | "dblclick" | "mousedown" | "mouseout" | "mouseover" | "mouseup" | "radius_changed" | "visible_changed" | "zIndex_changed" | "onLoad")[], "center_changed" | "click" | "clickable_changed" | "dblclick" | "mousedown" | "mouseout" | "mouseover" | "mouseup" | "radius_changed" | "visible_changed" | "zIndex_changed" | "onLoad", VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
latitude: {
type: NumberConstructor;
required: true;
};
longitude: {
type: NumberConstructor;
required: true;
};
radius: {
type: NumberConstructor;
required: false;
};
options: {
type: null;
required: false;
};
}>> & {
onCenter_changed?: ((...args: any[]) => any) | undefined;
onClick?: ((...args: any[]) => any) | undefined;
onClickable_changed?: ((...args: any[]) => any) | undefined;
onDblclick?: ((...args: any[]) => any) | undefined;
onMousedown?: ((...args: any[]) => any) | undefined;
onMouseout?: ((...args: any[]) => any) | undefined;
onMouseover?: ((...args: any[]) => any) | undefined;
onMouseup?: ((...args: any[]) => any) | undefined;
onRadius_changed?: ((...args: any[]) => any) | undefined;
onVisible_changed?: ((...args: any[]) => any) | undefined;
onZIndex_changed?: ((...args: any[]) => any) | undefined;
onOnLoad?: ((...args: any[]) => any) | undefined;
}, {}>;

export declare const NaverEllipse: DefineComponent<    {
bounds: {
type: null;
required: true;
};
options: {
type: null;
required: false;
};
}, (_ctx: any, _cache: any) => VNode<RendererNode, RendererElement, {
[key: string]: any;
}>, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, ("bounds_changed" | "click" | "clickable_changed" | "dblclick" | "mousedown" | "mouseout" | "mouseover" | "mouseup" | "visible_changed" | "zIndex_changed" | "onLoad")[], "bounds_changed" | "click" | "clickable_changed" | "dblclick" | "mousedown" | "mouseout" | "mouseover" | "mouseup" | "visible_changed" | "zIndex_changed" | "onLoad", VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
bounds: {
type: null;
required: true;
};
options: {
type: null;
required: false;
};
}>> & {
onBounds_changed?: ((...args: any[]) => any) | undefined;
onClick?: ((...args: any[]) => any) | undefined;
onClickable_changed?: ((...args: any[]) => any) | undefined;
onDblclick?: ((...args: any[]) => any) | undefined;
onMousedown?: ((...args: any[]) => any) | undefined;
onMouseout?: ((...args: any[]) => any) | undefined;
onMouseover?: ((...args: any[]) => any) | undefined;
onMouseup?: ((...args: any[]) => any) | undefined;
onVisible_changed?: ((...args: any[]) => any) | undefined;
onZIndex_changed?: ((...args: any[]) => any) | undefined;
onOnLoad?: ((...args: any[]) => any) | undefined;
}, {}>;

export declare const NaverGroundOverlay: DefineComponent<    {
url: {
type: StringConstructor;
required: true;
};
bounds: {
type: null;
required: true;
};
options: {
type: null;
required: false;
};
}, (_ctx: any, _cache: any) => VNode<RendererNode, RendererElement, {
[key: string]: any;
}>, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, ("click" | "dbclick" | "onLoad")[], "click" | "dbclick" | "onLoad", VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
url: {
type: StringConstructor;
required: true;
};
bounds: {
type: null;
required: true;
};
options: {
type: null;
required: false;
};
}>> & {
onClick?: ((...args: any[]) => any) | undefined;
onDbclick?: ((...args: any[]) => any) | undefined;
onOnLoad?: ((...args: any[]) => any) | undefined;
}, {}>;

export declare const NaverInfoWindow: DefineComponent<    {
marker: {
type: null;
required: true;
};
open: {
type: BooleanConstructor;
required: true;
};
options: {
type: null;
required: false;
};
}, (_ctx: any, _cache: any) => VNode<RendererNode, RendererElement, {
[key: string]: any;
}>, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, ("anchorColor_changed" | "anchorSize_changed" | "anchorSkew_changed" | "backgroundColor_changed" | "borderColor_changed" | "borderWidth_changed" | "close" | "content_changed" | "disableAnchor_changed" | "disableAutoPan_changed" | "maxWidth_changed" | "open" | "pixelOffset_changed" | "position_changed" | "zIndex_changed" | "onLoad")[], "anchorColor_changed" | "anchorSize_changed" | "anchorSkew_changed" | "backgroundColor_changed" | "borderColor_changed" | "borderWidth_changed" | "close" | "content_changed" | "disableAnchor_changed" | "disableAutoPan_changed" | "maxWidth_changed" | "open" | "pixelOffset_changed" | "position_changed" | "zIndex_changed" | "onLoad", VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
marker: {
type: null;
required: true;
};
open: {
type: BooleanConstructor;
required: true;
};
options: {
type: null;
required: false;
};
}>> & {
onAnchorColor_changed?: ((...args: any[]) => any) | undefined;
onAnchorSize_changed?: ((...args: any[]) => any) | undefined;
onAnchorSkew_changed?: ((...args: any[]) => any) | undefined;
onBackgroundColor_changed?: ((...args: any[]) => any) | undefined;
onBorderColor_changed?: ((...args: any[]) => any) | undefined;
onBorderWidth_changed?: ((...args: any[]) => any) | undefined;
onClose?: ((...args: any[]) => any) | undefined;
onContent_changed?: ((...args: any[]) => any) | undefined;
onDisableAnchor_changed?: ((...args: any[]) => any) | undefined;
onDisableAutoPan_changed?: ((...args: any[]) => any) | undefined;
onMaxWidth_changed?: ((...args: any[]) => any) | undefined;
onOpen?: ((...args: any[]) => any) | undefined;
onPixelOffset_changed?: ((...args: any[]) => any) | undefined;
onPosition_changed?: ((...args: any[]) => any) | undefined;
onZIndex_changed?: ((...args: any[]) => any) | undefined;
onOnLoad?: ((...args: any[]) => any) | undefined;
}, {}>;

export declare const NaverMap: DefineComponent<    {
mapOptions: {
type: null;
required: false;
};
initLayers: {
type: ArrayConstructor;
required: false;
};
}, (_ctx: any, _cache: any) => VNode<RendererNode, RendererElement, {
[key: string]: any;
}>, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, ("mousedown" | "mouseup" | "click" | "dblclick" | "rightclick" | "mouseover" | "mouseout" | "mousemove" | "dragstart" | "drag" | "dragend" | "touchstart" | "touchmove" | "touchend" | "pinchstart" | "pinch" | "pinchend" | "tap" | "longtap" | "twofingertap" | "doubletap" | "addLayer" | "bounds_changed" | "center_changed" | "centerPoint_changed" | "idle" | "init_stylemap" | "keydown" | "keyup" | "mapType_changed" | "mapTypeId_changed" | "panning" | "projection_changed" | "removeLayer" | "resize" | "size_changed" | "tilesloaded" | "zoom_changed" | "zooming" | "onLoad")[], "mousedown" | "mouseup" | "click" | "dblclick" | "rightclick" | "mouseover" | "mouseout" | "mousemove" | "dragstart" | "drag" | "dragend" | "touchstart" | "touchmove" | "touchend" | "pinchstart" | "pinch" | "pinchend" | "tap" | "longtap" | "twofingertap" | "doubletap" | "addLayer" | "bounds_changed" | "center_changed" | "centerPoint_changed" | "idle" | "init_stylemap" | "keydown" | "keyup" | "mapType_changed" | "mapTypeId_changed" | "panning" | "projection_changed" | "removeLayer" | "resize" | "size_changed" | "tilesloaded" | "zoom_changed" | "zooming" | "onLoad", VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
mapOptions: {
type: null;
required: false;
};
initLayers: {
type: ArrayConstructor;
required: false;
};
}>> & {
onMousedown?: ((...args: any[]) => any) | undefined;
onMouseup?: ((...args: any[]) => any) | undefined;
onClick?: ((...args: any[]) => any) | undefined;
onDblclick?: ((...args: any[]) => any) | undefined;
onRightclick?: ((...args: any[]) => any) | undefined;
onMouseover?: ((...args: any[]) => any) | undefined;
onMouseout?: ((...args: any[]) => any) | undefined;
onMousemove?: ((...args: any[]) => any) | undefined;
onDragstart?: ((...args: any[]) => any) | undefined;
onDrag?: ((...args: any[]) => any) | undefined;
onDragend?: ((...args: any[]) => any) | undefined;
onTouchstart?: ((...args: any[]) => any) | undefined;
onTouchmove?: ((...args: any[]) => any) | undefined;
onTouchend?: ((...args: any[]) => any) | undefined;
onPinchstart?: ((...args: any[]) => any) | undefined;
onPinch?: ((...args: any[]) => any) | undefined;
onPinchend?: ((...args: any[]) => any) | undefined;
onTap?: ((...args: any[]) => any) | undefined;
onLongtap?: ((...args: any[]) => any) | undefined;
onTwofingertap?: ((...args: any[]) => any) | undefined;
onDoubletap?: ((...args: any[]) => any) | undefined;
onAddLayer?: ((...args: any[]) => any) | undefined;
onBounds_changed?: ((...args: any[]) => any) | undefined;
onCenter_changed?: ((...args: any[]) => any) | undefined;
onCenterPoint_changed?: ((...args: any[]) => any) | undefined;
onIdle?: ((...args: any[]) => any) | undefined;
onInit_stylemap?: ((...args: any[]) => any) | undefined;
onKeydown?: ((...args: any[]) => any) | undefined;
onKeyup?: ((...args: any[]) => any) | undefined;
onMapType_changed?: ((...args: any[]) => any) | undefined;
onMapTypeId_changed?: ((...args: any[]) => any) | undefined;
onPanning?: ((...args: any[]) => any) | undefined;
onProjection_changed?: ((...args: any[]) => any) | undefined;
onRemoveLayer?: ((...args: any[]) => any) | undefined;
onResize?: ((...args: any[]) => any) | undefined;
onSize_changed?: ((...args: any[]) => any) | undefined;
onTilesloaded?: ((...args: any[]) => any) | undefined;
onZoom_changed?: ((...args: any[]) => any) | undefined;
onZooming?: ((...args: any[]) => any) | undefined;
onOnLoad?: ((...args: any[]) => any) | undefined;
}, {}>;

export declare const NaverMarker: DefineComponent<    {
latitude: {
type: NumberConstructor;
required: true;
};
longitude: {
type: NumberConstructor;
required: true;
};
htmlIcon: {
type: null;
required: false;
};
}, (_ctx: any, _cache: any) => VNode<RendererNode, RendererElement, {
[key: string]: any;
}>, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, ("mousedown" | "mouseup" | "click" | "dblclick" | "rightclick" | "mouseover" | "mouseout" | "mousemove" | "dragstart" | "drag" | "dragend" | "touchstart" | "touchmove" | "touchend" | "pinchstart" | "pinch" | "pinchend" | "tap" | "longtap" | "twofingertap" | "doubletap" | "onLoad")[], "mousedown" | "mouseup" | "click" | "dblclick" | "rightclick" | "mouseover" | "mouseout" | "mousemove" | "dragstart" | "drag" | "dragend" | "touchstart" | "touchmove" | "touchend" | "pinchstart" | "pinch" | "pinchend" | "tap" | "longtap" | "twofingertap" | "doubletap" | "onLoad", VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
latitude: {
type: NumberConstructor;
required: true;
};
longitude: {
type: NumberConstructor;
required: true;
};
htmlIcon: {
type: null;
required: false;
};
}>> & {
onMousedown?: ((...args: any[]) => any) | undefined;
onMouseup?: ((...args: any[]) => any) | undefined;
onClick?: ((...args: any[]) => any) | undefined;
onDblclick?: ((...args: any[]) => any) | undefined;
onRightclick?: ((...args: any[]) => any) | undefined;
onMouseover?: ((...args: any[]) => any) | undefined;
onMouseout?: ((...args: any[]) => any) | undefined;
onMousemove?: ((...args: any[]) => any) | undefined;
onDragstart?: ((...args: any[]) => any) | undefined;
onDrag?: ((...args: any[]) => any) | undefined;
onDragend?: ((...args: any[]) => any) | undefined;
onTouchstart?: ((...args: any[]) => any) | undefined;
onTouchmove?: ((...args: any[]) => any) | undefined;
onTouchend?: ((...args: any[]) => any) | undefined;
onPinchstart?: ((...args: any[]) => any) | undefined;
onPinch?: ((...args: any[]) => any) | undefined;
onPinchend?: ((...args: any[]) => any) | undefined;
onTap?: ((...args: any[]) => any) | undefined;
onLongtap?: ((...args: any[]) => any) | undefined;
onTwofingertap?: ((...args: any[]) => any) | undefined;
onDoubletap?: ((...args: any[]) => any) | undefined;
onOnLoad?: ((...args: any[]) => any) | undefined;
}, {}>;

export declare const NaverPolygon: DefineComponent<    {
paths: {
type: ArrayConstructor;
required: true;
};
options: {
type: null;
required: false;
};
}, (_ctx: any, _cache: any) => VNode<RendererNode, RendererElement, {
[key: string]: any;
}>, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, ("click" | "clickable_changed" | "dblclick" | "mousedown" | "mouseout" | "mouseover" | "mouseup" | "visible_changed" | "zIndex_changed" | "onLoad")[], "click" | "clickable_changed" | "dblclick" | "mousedown" | "mouseout" | "mouseover" | "mouseup" | "visible_changed" | "zIndex_changed" | "onLoad", VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
paths: {
type: ArrayConstructor;
required: true;
};
options: {
type: null;
required: false;
};
}>> & {
onClick?: ((...args: any[]) => any) | undefined;
onClickable_changed?: ((...args: any[]) => any) | undefined;
onDblclick?: ((...args: any[]) => any) | undefined;
onMousedown?: ((...args: any[]) => any) | undefined;
onMouseout?: ((...args: any[]) => any) | undefined;
onMouseover?: ((...args: any[]) => any) | undefined;
onMouseup?: ((...args: any[]) => any) | undefined;
onVisible_changed?: ((...args: any[]) => any) | undefined;
onZIndex_changed?: ((...args: any[]) => any) | undefined;
onOnLoad?: ((...args: any[]) => any) | undefined;
}, {}>;

export declare const NaverPolyline: DefineComponent<    {
path: {
type: ArrayConstructor;
required: true;
};
options: {
type: null;
required: false;
};
}, (_ctx: any, _cache: any) => VNode<RendererNode, RendererElement, {
[key: string]: any;
}>, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, string[], string, VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
path: {
type: ArrayConstructor;
required: true;
};
options: {
type: null;
required: false;
};
}>> & {
[x: `on${Capitalize<string>}`]: ((...args: any[]) => any) | undefined;
}, {}>;

export declare const NaverRectangle: DefineComponent<    {
bounds: {
type: null;
required: true;
};
options: {
type: null;
required: false;
};
}, (_ctx: any, _cache: any) => VNode<RendererNode, RendererElement, {
[key: string]: any;
}>, unknown, {}, {}, ComponentOptionsMixin, ComponentOptionsMixin, ("bounds_changed" | "click" | "clickable_changed" | "dblclick" | "mousedown" | "mouseout" | "mouseover" | "mouseup" | "visible_changed" | "zIndex_changed" | "onLoad")[], "bounds_changed" | "click" | "clickable_changed" | "dblclick" | "mousedown" | "mouseout" | "mouseover" | "mouseup" | "visible_changed" | "zIndex_changed" | "onLoad", VNodeProps & AllowedComponentProps & ComponentCustomProps, Readonly<ExtractPropTypes<    {
bounds: {
type: null;
required: true;
};
options: {
type: null;
required: false;
};
}>> & {
onBounds_changed?: ((...args: any[]) => any) | undefined;
onClick?: ((...args: any[]) => any) | undefined;
onClickable_changed?: ((...args: any[]) => any) | undefined;
onDblclick?: ((...args: any[]) => any) | undefined;
onMousedown?: ((...args: any[]) => any) | undefined;
onMouseout?: ((...args: any[]) => any) | undefined;
onMouseover?: ((...args: any[]) => any) | undefined;
onMouseup?: ((...args: any[]) => any) | undefined;
onVisible_changed?: ((...args: any[]) => any) | undefined;
onZIndex_changed?: ((...args: any[]) => any) | undefined;
onOnLoad?: ((...args: any[]) => any) | undefined;
}, {}>;

export { Options }

declare interface Options_2 {
    clientId: string;
    category?: "gov" | "ncp" | "fin";
    subModules?: SubModules_2[];
}

export { SubModules }

declare type SubModules_2 = "panorama" | "geocoder" | "drawing" | "visualization";

export { }
