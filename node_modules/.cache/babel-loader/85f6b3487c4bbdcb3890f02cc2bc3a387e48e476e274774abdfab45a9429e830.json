{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, createElementVNode as _createElementVNode, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = [\"page\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Header_vue = _resolveComponent(\"Header-vue\");\n  const _component_BackButton = _resolveComponent(\"BackButton\");\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode(_component_Header_vue), $options.backBtnShow ? (_openBlock(), _createBlock(_component_BackButton, {\n    key: 0\n  })) : _createCommentVNode(\"v-if\", true), _createElementVNode(\"div\", {\n    id: \"content\",\n    page: $options.pageStatus\n  }, [_createVNode(_component_router_view)], 8 /* PROPS */, _hoisted_1)], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createVNode","_component_Header_vue","$options","backBtnShow","_createBlock","_component_BackButton","key","_createCommentVNode","_createElementVNode","id","page","pageStatus","_component_router_view","_hoisted_1"],"sources":["/Users/gimgaui/Documents/documents/vue/vueTest/vue2/src/App.vue"],"sourcesContent":["<template>\n    <Header-vue></Header-vue>\n    <BackButton v-if=\"backBtnShow\" />\n    <div id=\"content\" :page=\"pageStatus\">\n      <router-view />\n    </div>\n</template>\n\n<script>\n// import HelloWorld from './components/HelloWorld.vue'\nimport BackButton from './components/BackButton';\nimport './assets/css/common.css';\n\nexport default {\n  name: 'App',\n  props : {},\n  components: {\n    BackButton\n  },\n  computed : {\n    pageStatus(){\n      return this.$store.state.pageStatus\n    },\n    backBtnShow(){\n      let temp = true;\n      if(this.pageStatus === \"listPage\"){\n        temp = false\n      }\n      return temp;\n    }\n  },\n\n  data : ()=>{\n    return {\n      checked : true,\n      css : {\n        token: {\n          Button: {\n            colorPrimary : 'skyblue',\n            borderRadius : 4,\n            fontColor : 'red',\n          },\n          Radio : {\n            colorPrimary : 'green',\n          },\n        },\n      }\n    }\n  },\n  created(){},\n  mounted(){},\n  watch : {\n    $route(to) {\n      let path = (to.fullPath.replace(/(^\\/)/,'') === \"\")?\"listPage\":to.fullPath.replace(/(^\\/)/,'');\n      this.$store.state.pageStatus = path;\n    },\n  },\n  methods : {},\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n</style>\n"],"mappings":";mBAAA;;;;;uBAAAA,mBAAA,CAAAC,SAAA,SACIC,YAAA,CAAyBC,qBAAA,GACPC,QAAA,CAAAC,WAAW,I,cAA7BC,YAAA,CAAiCC,qBAAA;IAFrCC,GAAA;EAAA,MAAAC,mBAAA,gBAGIC,mBAAA,CAEM;IAFDC,EAAE,EAAC,SAAS;IAAEC,IAAI,EAAER,QAAA,CAAAS;MACvBX,YAAA,CAAeY,sBAAA,E,iBAJrBC,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}