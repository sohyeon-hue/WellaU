{"ast":null,"code":"import { createElementVNode as _createElementVNode, toDisplayString as _toDisplayString, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"myCanvas\",\n  height: \"220\",\n  width: \"220\",\n  ref: \"canvas\",\n  style: {\n    \"transform\": \"rotate(-90deg)\"\n  }\n};\nconst _hoisted_2 = {\n  class: \"num\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", {\n    class: \"timeCircleBox\",\n    onClick: $setup.click\n  }, [_createElementVNode(\"canvas\", _hoisted_1, null, 512 /* NEED_PATCH */), _createElementVNode(\"div\", _hoisted_2, _toDisplayString($setup.props.num), 1 /* TEXT */), _createElementVNode(\"p\", null, _toDisplayString($setup.props.infoText), 1 /* TEXT */)]);\n}","map":{"version":3,"names":["id","height","width","ref","style","class","_createElementBlock","onClick","$setup","click","_createElementVNode","_hoisted_1","_hoisted_2","_toDisplayString","props","num","infoText"],"sources":["/Users/gimgaui/Documents/documents/vue/WellaU/WellaU/src/components/TimeCircle.vue"],"sourcesContent":["<template>\n    <div class=\"timeCircleBox\" @click=\"click\">\n        <canvas id=\"myCanvas\" height=\"220\" width=\"220\" ref=\"canvas\" style=\"transform:rotate(-90deg);\"></canvas>\n        <div class=\"num\">{{props.num}}</div>\n        <p>{{props.infoText}}</p>\n    </div>\n</template>\n<script setup>\n    import { ref,defineProps,watch,defineEmits,onBeforeUnmount,defineExpose } from 'vue'\n\n    const props = defineProps({\n        num : {\n            type : Number,\n            default : ()=>{\n                return \"\";\n            }\n        },\n        time : {\n            type : Number,\n            default : ()=>{\n                return 60000;\n            }\n        },\n        bgColor :{\n            type : String,\n            default : ()=>{\n                return \"#FF3B2E\";\n            }\n        },\n        infoText : {\n            type : String,\n            default : ()=>{\n                return \"눌러서 즉시 전송\";\n            }\n        }\n    })\n    const stop = ()=>{\n        clearInterval(timer);\n        timer = null;\n        angle = 0;\n    }\n    const pause = ()=>{\n        clearInterval(timer);\n        timer = null;\n    }\n    const emits = defineEmits(['clickEv','timeout'])\n    const canvas = ref(\"canvas\");\n    let timer = null;\n    let angle = 0;\n    function start(){\n        const oneStep = 100;\n        const totalTime = props.time;\n        const circlePrice = 6.3;\n        const circlePrice2 = 360;\n        const circleSize = 5;\n        clearInterval(timer)\n        timer = setInterval(()=>{\n            angle += circlePrice / (totalTime / oneStep);\n            draw(angle);\n            if(angle >= circlePrice){\n                clearInterval(timer);\n                timer = null\n                emits(\"timeout\")\n            }\n        },oneStep)\n        function draw(angle){\n            const exchangeAngle = (circlePrice2 / circlePrice) * angle\n            const ctx = canvas.value.getContext(\"2d\");\n            ctx.clearRect(0,0,canvas.value.width, canvas.value.height);\n\n            ctx.beginPath();\n            ctx.fillStyle = props.bgColor;\n            ctx.fillRect(0,0,canvas.value.width,canvas.value.height);\n            ctx.closePath();\n\n\n            ctx.beginPath();\n            ctx.moveTo((canvas.value.width / 2),(canvas.value.height / 2));\n            ctx.arc((canvas.value.width / 2),(canvas.value.height / 2),(canvas.value.width / 2),(canvas.value.height / 2),0,(Math.PI/180) * 360,false);\n            ctx.fillStyle = \"rgba(255,255,255,0.3)\";\n            ctx.fill();\n            ctx.closePath();\n\n            ctx.beginPath();\n            ctx.moveTo((canvas.value.width / 2),(canvas.value.height / 2));\n            ctx.arc((canvas.value.width / 2),(canvas.value.height / 2),(canvas.value.width / 2),0,(Math.PI/180) * exchangeAngle,false);\n            ctx.closePath();\n            ctx.fillStyle = \"#fff\";\n            ctx.fill();\n            \n            ctx.beginPath();\n            ctx.moveTo((canvas.value.width / 2),(canvas.value.height / 2));\n            ctx.arc((canvas.value.width / 2),(canvas.value.height / 2),((canvas.value.width / 2) - (circleSize)),0,(Math.PI/180) * 360,false);\n            ctx.closePath();\n            ctx.fillStyle = props.bgColor;\n            ctx.fill();\n            ctx.closePath();\n\n            ctx.beginPath();\n            ctx.moveTo(canvas.value.width - (circleSize / 2),canvas.value.height / 2)\n            ctx.arc(canvas.value.width - (circleSize / 2),canvas.value.height / 2,(circleSize / 2),0,(Math.PI/180)*360,false);\n            ctx.fillStyle = \"#fff\";\n            ctx.fill();\n            ctx.closePath();\n\n            const left = canvas.value.width / 2 + ((canvas.value.width / 2) - (circleSize / 2) ) * Math.cos(angle);\n            const top = canvas.value.height / 2 + ((canvas.value.height / 2) - (circleSize / 2) ) * Math.sin(angle);\n            ctx.beginPath();\n            ctx.moveTo(left,top);\n            ctx.arc(left,top,(circleSize / 2),(Math.PI / 180) * 360, false);\n            ctx.fillStyle = \"#fff\";\n            ctx.fill();\n            ctx.closePath();\n\n            // ctx.moveTo(0,0)\n            // ctx.rotate(90 * Math.PI / 180);\n            // ctx.beginPath();\n            // ctx.font=\"bold 100rem Noto Sans KR\"\n            // ctx.textAlign = \"center\"\n            // ctx.fillStyle = \"#fff\"\n            // ctx.fillText(props.num,((canvas.value.width / 2)) - 3,((canvas.value.width / 2) * -1) + 38);\n            // ctx.setTransform(1,0,0,1,0,0);\n        }\n\n    }\n    const click = ()=>{\n        const checked = timer ? true : false;\n        emits(\"clickEv\",checked);\n    }\n    const getState = ()=>{\n        const checked = timer ? true : false;\n        return checked;\n    }\n    watch(()=>props.num,()=>{\n        angle = 0;\n        start();\n    },{immediate : true})\n\n    onBeforeUnmount(()=>{\n        clearInterval(timer);\n    })\n    defineExpose({\n        start,\n        stop,\n        pause,\n        getState,\n    })\n</script>\n<style type=\"scss\" scoped>\n    .timeCircleBox{\n        position:relative;\n        &> p{\n            position:absolute;\n            bottom:35rem;\n            left:50%;\n            transform:translate(-50%,0);\n            font-size: 15rem;\n            font-style: normal;\n            font-weight: 600;\n            line-height: 1;\n            color:#fff;\n            white-space:nowrap;\n        }\n        &> .num{\n            position:absolute;\n            top:0;\n            right:0;\n            bottom:20rem;\n            left:0;\n            display:flex;\n            align-items:center;\n            justify-content:center;\n            font-family: \"Roboto\";\n            font-size: 92rem;\n            font-style: normal;\n            font-weight: 600;\n            line-height: normal;\n            color:#fff;\n        }\n    }\n</style>\n"],"mappings":";;EAEgBA,EAAE,EAAC,UAAU;EAACC,MAAM,EAAC,KAAK;EAACC,KAAK,EAAC,KAAK;EAACC,GAAG,EAAC,QAAQ;EAACC,KAAiC,EAAjC;IAAA;EAAA;;;EACvDC,KAAK,EAAC;AAAK;;uBAFpBC,mBAAA,CAIM;IAJDD,KAAK,EAAC,eAAe;IAAEE,OAAK,EAAEC,MAAA,CAAAC;MAC/BC,mBAAA,CAAuG,UAAvGC,UAAuG,+BACvGD,mBAAA,CAAoC,OAApCE,UAAoC,EAAAC,gBAAA,CAAjBL,MAAA,CAAAM,KAAK,CAACC,GAAG,kBAC5BL,mBAAA,CAAyB,WAAAG,gBAAA,CAApBL,MAAA,CAAAM,KAAK,CAACE,QAAQ,iB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}